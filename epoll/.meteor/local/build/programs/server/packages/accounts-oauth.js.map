{"version":3,"file":"\\packages\\accounts-oauth.js","sources":["accounts-oauth/oauth_common.js","accounts-oauth/oauth_server.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,oB;;AAEA,kB;;AAEA,wD;AACA,uD;AACA,kD;AACA,4B;AACA,kD;AACA,wB;;AAEA,sB;AACA,+E;AACA,gF;AACA,gF;AACA,wB;AACA,yD;AACA,sD;AACA,G;AACA,E;;AAEA,2C;AACA,0B;AACA,E;;;;;;;;;;;;;;;;;;;ACvBA,qE;AACA,oD;AACA,kD;AACA,qB;AACA,qC;;AAEA,kD;;AAEA,4D;AACA,uF;AACA,4E;AACA,4E;AACA,qB;AACA,M;AACA,qE;AACA,2E;AACA,0E;AACA,8D;AACA,qE;AACA,8D;AACA,G;AACA,uE;AACA,8B;AACA,qE;AACA,mB;AACA,iB;AACA,M;AACA,kH;AACA,G","sourcesContent":["Accounts.oauth = {};\r\n\r\nvar services = {};\r\n\r\n// Helper for registering OAuth based accounts packages.\r\n// On the server, adds an index to the user collection.\r\nAccounts.oauth.registerService = function (name) {\r\n  if (_.has(services, name))\r\n    throw new Error(\"Duplicate service: \" + name);\r\n  services[name] = true;\r\n\r\n  if (Meteor.server) {\r\n    // Accounts.updateOrCreateUserFromExternalService does a lookup by this id,\r\n    // so this should be a unique index. You might want to add indexes for other\r\n    // fields returned by your service (eg services.github.login) but you can do\r\n    // that in your app.\r\n    Meteor.users._ensureIndex('services.' + name + '.id',\r\n                              {unique: 1, sparse: 1});\r\n  }\r\n};\r\n\r\nAccounts.oauth.serviceNames = function () {\r\n  return _.keys(services);\r\n};\r\n","// Listen to calls to `login` with an oauth option set. This is where\r\n// users actually get logged in to meteor via oauth.\r\nAccounts.registerLoginHandler(function (options) {\r\n  if (!options.oauth)\r\n    return undefined; // don't handle\r\n\r\n  check(options.oauth, {credentialToken: String});\r\n\r\n  if (!Oauth.hasCredential(options.oauth.credentialToken)) {\r\n    // OAuth credentialToken is not recognized, which could be either because the popup\r\n    // was closed by the user before completion, or some sort of error where\r\n    // the oauth provider didn't talk to our server correctly and closed the\r\n    // popup somehow.\r\n    //\r\n    // we assume it was user canceled, and report it as such, using a\r\n    // Meteor.Error which the client can recognize. this will mask failures\r\n    // where things are misconfigured such that the server doesn't see the\r\n    // request but does close the window. This seems unlikely.\r\n    throw new Meteor.Error(Accounts.LoginCancelledError.numericError,\r\n                           'No matching login attempt found');\r\n  }\r\n  var result = Oauth.retrieveCredential(options.oauth.credentialToken);\r\n  if (result instanceof Error)\r\n    // We tried to login, but there was a fatal error. Report it back\r\n    // to the user.\r\n    throw result;\r\n  else\r\n    return Accounts.updateOrCreateUserFromExternalService(result.serviceName, result.serviceData, result.options);\r\n});\r\n\r\n"]}