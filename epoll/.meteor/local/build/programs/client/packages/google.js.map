)]}'
{"version":3,"file":"\\packages\\google.js","sources":["google/google_configure.html","google/google_configure.js","google/google_client.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,ihC;;;;;;;;;;;;;;;;;;;ACAA,qE;AACA,8B;AACA,E;;AAEA,oE;AACA,U;AACA,+C;AACA,gD;AACA,I;AACA,E;;;;;;;;;;;;;;;;;;;ACTA,Y;;AAEA,0C;AACA,4B;AACA,mF;AACA,4E;AACA,W;AACA,kF;AACA,qD;AACA,4E;AACA,gD;AACA,iB;AACA,wB;AACA,iB;AACA,G;;AAEA,gF;AACA,gB;AACA,2I;AACA,W;AACA,G;;AAEA,oC;;AAEA,iD;AACA,2E;AACA,iE;AACA,iC;AACA,uC;AACA,wC;AACA,6D;;AAEA,8E;AACA,sE;AACA,sE;;AAEA,gB;AACA,qD;AACA,+B;AACA,yC;AACA,+B;AACA,sE;AACA,qC;AACA,sC;AACA,6C;;AAEA,+E;AACA,8E;AACA,sE;AACA,8E;AACA,+D;AACA,4E;AACA,6F;AACA,G;;AAEA,sC;AACA,+B;AACA,wD;AACA,uC;AACA,E","sourcesContent":["Template.__define__(\"configureLoginServiceDialogForGoogle\",Package.handlebars.Handlebars.json_ast_to_func([\"<p>\\r\\n    First, you'll need to get a Google Client ID. Follow these steps:\\r\\n  </p>\\r\\n  <ol>\\r\\n    <li>\\r\\n      Visit <a href=\\\"https://code.google.com/apis/console/\\\" target=\\\"blank\\\">https://code.google.com/apis/console/</a>\\r\\n    </li>\\r\\n    <li>\\r\\n      If necessary, \\\"Create Project\\\"\\r\\n    <li>\\r\\n      Open the \\\"API Access\\\" tab on the left\\r\\n    </li>\\r\\n    <li>\\r\\n      Create another Client ID\\r\\n    </li>\\r\\n    <li>\\r\\n      Choose \\\"Web application\\\" as the type\\r\\n    </li>\\r\\n    <li>\\r\\n      Click \\\"More options&hellip;\\\" after \\\"Your site or hostname\\\"\\r\\n    </li>\\r\\n    <li>\\r\\n      Set Authorized Redirect URIs to: <span class=\\\"url\\\">\",[\"{\",[[0,\"siteUrl\"]]],\"_oauth/google?close</span>\\r\\n    </li>\\r\\n    <li>\\r\\n      Set Authorized JavaScript Origins to: <span class=\\\"url\\\">\",[\"{\",[[0,\"siteUrl\"]]],\"</span>\\r\\n    </li>\\r\\n    <li>\\r\\n      Create client ID\\r\\n    </li>\\r\\n  </ol>\"]));\n","Template.configureLoginServiceDialogForGoogle.siteUrl = function () {\r\n  return Meteor.absoluteUrl();\r\n};\r\n\r\nTemplate.configureLoginServiceDialogForGoogle.fields = function () {\r\n  return [\r\n    {property: 'clientId', label: 'Client ID'},\r\n    {property: 'secret', label: 'Client secret'}\r\n  ];\r\n};\r\n","Google = {};\r\n\r\n// Request Google credentials for the user\r\n// @param options {optional}\r\n// @param credentialRequestCompleteCallback {Function} Callback function to call on\r\n//   completion. Takes one argument, credentialToken on success, or Error on\r\n//   error.\r\nGoogle.requestCredential = function (options, credentialRequestCompleteCallback) {\r\n  // support both (options, callback) and (callback).\r\n  if (!credentialRequestCompleteCallback && typeof options === 'function') {\r\n    credentialRequestCompleteCallback = options;\r\n    options = {};\r\n  } else if (!options) {\r\n    options = {};\r\n  }\r\n\r\n  var config = ServiceConfiguration.configurations.findOne({service: 'google'});\r\n  if (!config) {\r\n    credentialRequestCompleteCallback && credentialRequestCompleteCallback(new ServiceConfiguration.ConfigError(\"Service not configured\"));\r\n    return;\r\n  }\r\n\r\n  var credentialToken = Random.id();\r\n\r\n  // always need this to get user id from google.\r\n  var requiredScope = ['https://www.googleapis.com/auth/userinfo.profile'];\r\n  var scope = ['https://www.googleapis.com/auth/userinfo.email'];\r\n  if (options.requestPermissions)\r\n    scope = options.requestPermissions;\r\n  scope = _.union(scope, requiredScope);\r\n  var flatScope = _.map(scope, encodeURIComponent).join('+');\r\n\r\n  // https://developers.google.com/accounts/docs/OAuth2WebServer#formingtheurl\r\n  var accessType = options.requestOfflineToken ? 'offline' : 'online';\r\n  var approvalPrompt = options.forceApprovalPrompt ? 'force' : 'auto';\r\n\r\n  var loginUrl =\r\n        'https://accounts.google.com/o/oauth2/auth' +\r\n        '?response_type=code' +\r\n        '&client_id=' + config.clientId +\r\n        '&scope=' + flatScope +\r\n        '&redirect_uri=' + Meteor.absoluteUrl('_oauth/google?close') +\r\n        '&state=' + credentialToken +\r\n        '&access_type=' + accessType +\r\n        '&approval_prompt=' + approvalPrompt;\r\n\r\n  // Use Google's domain-specific login page if we want to restrict creation to\r\n  // a particular email domain. (Don't use it if restrictCreationByEmailDomain\r\n  // is a function.) Note that all this does is change Google's UI ---\r\n  // accounts-base/accounts_server.js still checks server-side that the server\r\n  // has the proper email address after the OAuth conversation.\r\n  if (typeof Accounts._options.restrictCreationByEmailDomain === 'string') {\r\n    loginUrl += '&hd=' + encodeURIComponent(Accounts._options.restrictCreationByEmailDomain);\r\n  }\r\n\r\n  Oauth.initiateLogin(credentialToken,\r\n                      loginUrl,\r\n                      credentialRequestCompleteCallback,\r\n                      { height: 406 });\r\n};\r\n"]}