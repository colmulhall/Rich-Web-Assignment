)]}'
{"version":3,"file":"\\packages\\twitter.js","sources":["twitter/twitter_configure.html","twitter/twitter_configure.js","twitter/twitter_client.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+e;;;;;;;;;;;;;;;;;;;ACAA,sE;AACA,yD;AACA,sD;AACA,E;;AAEA,qE;AACA,U;AACA,qD;AACA,kD;AACA,I;AACA,E;;;;;;;;;;;;;;;;;;ACVA,a;;AAEA,2C;AACA,oE;AACA,mF;AACA,4E;AACA,W;AACA,mF;AACA,qD;AACA,4E;AACA,gD;AACA,iB;AACA,G;;AAEA,iF;AACA,gB;AACA,2I;AACA,W;AACA,G;;AAEA,oC;AACA,gF;AACA,uF;AACA,yB;;AAEA,qD;AACA,qD;AACA,wF;;AAEA,gD;AACA,qD;AACA,uD;AACA,yC;AACA,sC;;AAEA,+E;AACA,E","sourcesContent":["Template.__define__(\"configureLoginServiceDialogForTwitter\",Package.handlebars.Handlebars.json_ast_to_func([\"<p>\\r\\n    First, you'll need to register your app on Twitter. Follow these steps:\\r\\n  </p>\\r\\n  <ol>\\r\\n    <li>\\r\\n      Visit <a href=\\\"https://dev.twitter.com/apps/new\\\" target=\\\"_blank\\\">https://dev.twitter.com/apps/new</a>\\r\\n    </li>\\r\\n    <li>\\r\\n      Set Callback URL to: <span class=\\\"url\\\">\",[\"{\",[[0,\"siteUrl\"]]],\"_oauth/twitter?close</span>\\r\\n    </li>\\r\\n  </ol>\"]));\n","Template.configureLoginServiceDialogForTwitter.siteUrl = function () {\r\n  // Twitter doesn't recognize localhost as a domain name\r\n  return Meteor.absoluteUrl({replaceLocalhost: true});\r\n};\r\n\r\nTemplate.configureLoginServiceDialogForTwitter.fields = function () {\r\n  return [\r\n    {property: 'consumerKey', label: 'Consumer key'},\r\n    {property: 'secret', label: 'Consumer secret'}\r\n  ];\r\n};","Twitter = {};\r\n\r\n// Request Twitter credentials for the user\r\n// @param options {optional}  XXX support options.requestPermissions\r\n// @param credentialRequestCompleteCallback {Function} Callback function to call on\r\n//   completion. Takes one argument, credentialToken on success, or Error on\r\n//   error.\r\nTwitter.requestCredential = function (options, credentialRequestCompleteCallback) {\r\n  // support both (options, callback) and (callback).\r\n  if (!credentialRequestCompleteCallback && typeof options === 'function') {\r\n    credentialRequestCompleteCallback = options;\r\n    options = {};\r\n  }\r\n\r\n  var config = ServiceConfiguration.configurations.findOne({service: 'twitter'});\r\n  if (!config) {\r\n    credentialRequestCompleteCallback && credentialRequestCompleteCallback(new ServiceConfiguration.ConfigError(\"Service not configured\"));\r\n    return;\r\n  }\r\n\r\n  var credentialToken = Random.id();\r\n  // We need to keep credentialToken across the next two 'steps' so we're adding\r\n  // a credentialToken parameter to the url and the callback url that we'll be returned\r\n  // to by oauth provider\r\n\r\n  // url back to app, enters \"step 2\" as described in\r\n  // packages/accounts-oauth1-helper/oauth1_server.js\r\n  var callbackUrl = Meteor.absoluteUrl('_oauth/twitter?close&state=' + credentialToken);\r\n\r\n  // url to app, enters \"step 1\" as described in\r\n  // packages/accounts-oauth1-helper/oauth1_server.js\r\n  var url = '/_oauth/twitter/?requestTokenAndRedirect='\r\n        + encodeURIComponent(callbackUrl)\r\n        + '&state=' + credentialToken;\r\n\r\n  Oauth.initiateLogin(credentialToken, url, credentialRequestCompleteCallback);\r\n};\r\n"]}